-- Create the database (if not exists)
CREATE DATABASE IF NOT EXISTS ai_study_helper;
USE ai_study_helper;

-- Users table
CREATE TABLE IF NOT EXISTS users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(50) NOT NULL,
    password VARCHAR(255) NOT NULL,
    email VARCHAR(100) NOT NULL UNIQUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
-- Complete notes table with all frontend fields
CREATE TABLE IF NOT EXISTS notes (
    -- Primary key
    id INT AUTO_INCREMENT PRIMARY KEY,
    
    -- User association (required)
    user_id INT NOT NULL,
    
    -- Title/Name (what shows in table and view page - editable)
    title VARCHAR(255) NOT NULL DEFAULT 'Untitled Note',
    
    -- Content (the actual note text content)
    content LONGTEXT,
    
    -- File size display (e.g., "2.5 KB", "1.2 MB")
    file_size VARCHAR(20),
    
    -- File type display ("Text Document", "PDF Document")
    file_type VARCHAR(50) DEFAULT 'Text Document',
    
    -- Original filename if uploaded (for reference)
    original_filename VARCHAR(255),
    
    -- Timestamps
    uploaded_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    -- Foreign key constraint
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    
    -- Indexes for performance
    INDEX idx_user_id (user_id),
    INDEX idx_uploaded_at (uploaded_at),
    INDEX idx_title (title),
    INDEX idx_updated_at (updated_at)
);

-- Summaries table for AI-generated summaries
CREATE TABLE IF NOT EXISTS summaries (
    id INT AUTO_INCREMENT PRIMARY KEY,

    -- Link to the note being summarized
    note_id INT NOT NULL,

    -- User association
    user_id INT NOT NULL,

    -- Summary content generated by AI
    summary_text LONGTEXT NOT NULL,

    -- Model used for generation (e.g., 'gemini-1.5-flash')
    ai_model VARCHAR(50) DEFAULT 'gemini-2.5-flash',

    -- When the summary was generated
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

    -- Foreign key constraints
    FOREIGN KEY (note_id) REFERENCES notes(id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,

    -- Indexes for performance
    INDEX idx_note_id (note_id),
    INDEX idx_user_id (user_id),
    INDEX idx_created_at (created_at)
);


-- Extracted content table for storing extracted text from PDFs
CREATE TABLE IF NOT EXISTS extracted_content (
    id INT AUTO_INCREMENT PRIMARY KEY,

    -- Link to the note being extracted
    note_id INT NOT NULL,

    -- User association
    user_id INT NOT NULL,

    -- Extracted text content from PDF
    extracted_text LONGTEXT NOT NULL,

    -- Extraction status and metadata
    extraction_status ENUM('pending', 'completed', 'failed') DEFAULT 'pending',
    error_message TEXT,

    -- When the content was extracted
    extracted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

    -- Foreign key constraints
    FOREIGN KEY (note_id) REFERENCES notes(id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,

    -- Indexes for performance
    INDEX idx_note_id (note_id),
    INDEX idx_user_id (user_id),
    INDEX idx_extraction_status (extraction_status),
    INDEX idx_extracted_at (extracted_at),

    -- Ensure one extraction per note
    UNIQUE KEY unique_note_extraction (note_id)
);

CREATE TABLE IF NOT EXISTS quizzes (
    id INT AUTO_INCREMENT PRIMARY KEY,
    note_id INT NOT NULL,
    user_id INT NOT NULL,
    questions JSON NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (note_id) REFERENCES notes(id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

-- Chat conversations table for managing AI chat sessions
CREATE TABLE chat_conversations (
    id INT AUTO_INCREMENT PRIMARY KEY,

    -- Associated with a specific note for context
    note_id INT NOT NULL,

    -- User who started the conversation
    user_id INT NOT NULL,

    -- Conversation title/name
    title VARCHAR(255) DEFAULT 'AI Chat',

    -- AI model used (for future extensibility)
    ai_model VARCHAR(50) DEFAULT 'gpt-4o-mini',

    -- When the conversation was created
    started_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

    -- When the last message was sent
    last_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

    -- Is the conversation active/complete
    is_active BOOLEAN DEFAULT TRUE,

    -- Foreign key constraints
    FOREIGN KEY (note_id) REFERENCES notes(id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,

    -- Indexes for performance
    INDEX idx_note_id (note_id),
    INDEX idx_user_id (user_id),
    INDEX idx_started_at (started_at),
    INDEX idx_last_activity (last_activity),
    INDEX idx_is_active (is_active)
);

-- Individual chat messages within conversations
CREATE TABLE chat_messages (
    id INT AUTO_INCREMENT PRIMARY KEY,

    -- Which conversation this message belongs to
    conversation_id INT NOT NULL,

    -- User association (matches conversation.user_id)
    user_id INT NOT NULL,

    -- Message role: 'user' or 'assistant'
    role ENUM('user', 'assistant') NOT NULL,

    -- The actual message content
    content LONGTEXT NOT NULL,

    -- When this message was created
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

    -- Token count for the message (for cost tracking)
    token_count INT DEFAULT 0,

    -- Foreign key constraints
    FOREIGN KEY (conversation_id) REFERENCES chat_conversations(id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,

    -- Indexes for performance
    INDEX idx_conversation_id (conversation_id),
    INDEX idx_user_id (user_id),
    INDEX idx_role (role),
    INDEX idx_created_at (created_at)
);
